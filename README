== ArHelper

These are methods which should be helpful when using ActiveRecord. It adds some useful (at least for me) class methods such as:

- Model#to_params
- Model#duplicates_on
- Model#search

DEPENDENCIES
== 
- map_by_method # => sudo gem install map_by_method

== ArHelper::Sugar

ArHelper::Sugar adds some convenient abstraction methods to ActionView and
ActionController, that makes querying a bit more pleasing and grammatically 
correct (in my opinion). This looks beatiful with Dr Nic's map_by_method gem
for example instead of User.find(:all).map_by_name, you can do all(:users).map_by_name

- all # a wrapper for Model#find :all
- first # a wrapper for Model#find :first
- last # a wrapper for Model#find :all, :order => "created_at ASC", :limit => 1
- recent # a wrapper for Model#find :all, :order => "created_at DESC",
                                    :limit => 5

USAGE

=== ArHelper::Sugar#all

all [name_of_model], options={}

- all(:users) # => User.find(:all)
- all(:users, :condtions => "last_name = 'johnson')
  # => User.find(:all, :conditions => "last_name = 'johnson'")

first [name_of_model], options={}

- first(:user) # => User.find(:first)
- first(:user, :conditions => "last_name => 'johnson'")
  # => User.find(:first, :conditions => "last_name = 'johnson'")

last [name_of_model], options={}

- last(:user) # => User.find(:all, :order => "created_at ASC", :limit => 1)
- last(:user, :conditions => "last_name => 'johnson'")

recent [name], options={}
--
Defaults to recent 5 records

- recent(:user), # => User.find(:all, :order => "created_at DESC", :limit => 5)
- recent(:user, :limit => 10) # => User.find(:all, :order => "created_at DESC", :limit => 5)
- recent(:user, :conditions => "last_name = 'johnson'")
  # => User.find(:all, :order => "created_at DESC", :limit => 5, 
                 :conditions => "last_name = 'johnson'")

--
If you want to use these methods in the console, simply add this to your .irbrc:

 # check to see if the ar_helper plugin is installed
  def ar_helper_exists?; File.exists?("vendor/plugins/ar_helper"); end

  def require_and_load_ar_helper
      require "vendor/plugins/ar_helper/lib/ar_helper"
      extend ArHelper::Sugar if ArHelper.constants.include?("Sugar")
      puts "ArHelper::Sugar methods not loaded ... install ArHelper plugin
            externally..." unless ArHelper.constants.include?("Sugar")
  end

  require_and_load_ar_helper if ar_helper_exists?

== Model#to_params

Model#to_params generates a hash of of filled in values for a model... this is 
exceptionally useful when writing tests and you need to pass a params hash to 
an action request:

  EXAMPLES:
    # generating the default values
    User.to_params # => {:params=>
    {:city=>"v3CQJNQrrZMSkeSup1UJu9h1T", 
     :comments=>"dxmxjH8YIepjSc55oVDj1V8IO", 
     :phone=>"N3bnnoyHDAtPsEGGgB2wKvwdP", 
     :address=>"A4iAY3otJGwmgzgaOGk4Aphur", 
     :zip=>"dGhvxtMKBQ2sHVZFkcUnnPLO8", 
     :group_id=>6, :created_on=>"2007-03-10", 
     :email=>"kpREqejydPvXz6hBT4dwbOZqS", 
     :user_name=>"DaS9KDPQkIjwDSLe5xTD4Bjw2", 
     :disabled=>false, 
     :last_name=>"W4YL68VTyqzj0ErPepIbjAUDW", 
     :password=>"6L5nFyxYaPDYzenDpLnXZVwwi", 
     :state=>"iX9TjwGeSTTiATzNnJtJbKIo3", 
     :first_name=>"B3bJ1t1AuVogwqSHRBPib29BC"}}
    
    # you can also pass in a name to change the params name (default is :params)
    User.to_params(:user) # => {:user=>
    {:phone=>"dAoJr5PpyGMhOwmLuIjpbaBIo", 
     :comments=>"rLIMIx1FbrTt7qCkSGJBdLnYq", 
     :group_id=>7, 
     :address=>"jc8uQdelKDY7w2bZNypEnELuV", 
     :zip=>"FOPg9qUaxspI9j22PlovqKR2J", 
     :created_on=>"2007-01-11", 
     :email=>"YtoU8y0jJGrzFXnUglhrlpO2U", 
     :user_name=>"Es8Iyd9Pe61E4kDiXIG04GoAT", 
     :disabled=>false, 
     :city=>"qdiN70bym11GdjqG82vzQ3bq3", 
     :last_name=>"bmsaPcWPSxrTAuj9bpaStdVJb", 
     :first_name=>"6aBEveFK2rbZicjrqJZhtcBul", 
     :password=>"AujzIGScA0EOvik6pcj5p2tNR", 
     :state=>"hZAGNvGfyNQ6UaoyPKYiWJOVj"}}

    # if you want to pass your own values to the hash, you can 
    # simply use Hash#merge
    User.to_params.merge :email => "me@address.com" # => {:params=>
    {:phone=>"viVGKG28rATle5U1p4NfEic4J", 
     :comments=>"zmfKC8Ae3Plctt2ijJOug3lY1", 
     :group_id=>0, 
     :address=>"VjqqgmHieZDpqlaaJqIeebY0l", 
     :zip=>"bDzfkR205SB7caZckSK8BCZcC", 
     :created_on=>"2007-11-25", 
     :email=>"me@address.com", 
     :user_name=>"ypkUAozwkWmpjcVtvam99i0jn", 
     :disabled=>false, 
     :city=>"2B7zACHqJ4346l1Owb50WaAXN", 
     :last_name=>"E1Uz66axISflNd7S3w2glwqnd", 
     :first_name=>"GT2xKVmmhJkhaMpm3yeBa4s1q", 
     :password=>"RKXQCkjN6veK2lhe4uIR9KmW6", 
     :state=>"wRBoDSYX1zdl4Y5sToDydTIcX"}}
    
    # you can create dummy data like:
    User.create User.to_params[:params]

== Model#search

Model#search searches a model using the LIKE operator.

# Searches a model using the LIKE operator 
EXAMPLES :
  # default use is searching through all columns
  User.search "something" 
  # => User.find :all, 
  #   :conditions => ["first_name LIKE ? OR last_name LIKE ?",
  #                   '%something%','%something%']
  # searching a single column                        
  User.search "something", "first_name" 
  # => User.find :all, :conditions => ["first_name LIKE ?", '%something%']

  # searching multiple columns                                      
  User.search "something", ["first_name","last_name"] 
  # => User.find :all, 
  #    :conditions => ["first_name LIKE ? OR last_name = ?",
  #               '%something%','%something%']
  
  
  # searching with an added condition passed as a string for single conditions
  User.search "something", :all, "active = 1"
  # => User.find :all,
  #    :conditions => ["first_name LIKE ? OR last_name = ? AND active = 1",
  #               '%something%','%something%']
  
  # searching with an added condition passed as an array for muliple conditions
  User.search "something", :all, ["active = 1","published = 0"]
  # => User.find :all,
  #    :conditions => ["first_name LIKE ? OR last_name = ? AND active = 1 AND published = 0",
  #               '%something%','%something%']
  
  # Search also returns added methods for associations on classes, such as :
  # Assuming User#has_many :comments
  # =>  u = User.search "something", :all, "active = 1"
  # =>  u.find_many[:comments] # => returns all related comments
  # the find_many method stores all has_many associations in
  # an array of association hashes
  
== Model#duplicates_on

Model#duplicates_on finds duplicate values for a column on a model

Model#duplicates_on [column_name]

- User.duplicates_on :first_name # => finds all the duplicates for first_name
